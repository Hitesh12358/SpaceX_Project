# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()
site_options = [{'label': site_name, 'value': site_name} for site_name in spacex_df['Launch Site'].unique()]


# Add the 'All Sites' option at the beginning

site_options.insert(0, {'label': 'All Sites', 'value': 'ALL'})

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # Assuming spacex_df is a DataFrame containing launch site name
                                # dcc.Dropdown(id='site-dropdown',...)
                                dcc.Dropdown(
                                        id='site-dropdown',
                                        options=site_options,
                                        value='ALL',  # Default value is 'ALL'
                                        placeholder="Select a Launch Site here",  # Placeholder text
                                        searchable=True  # Allow searching for launch sites
                                            ),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                # Import necessary libraries


                            # Callback function to update the pie chart

                                

                                                                    
                                
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                #dcc.RangeSlider(id='payload-slider',...
                                dcc.RangeSlider(
                                    id='payload-slider',
                                    min=0,         # Starting point (0 Kg)
                                    max=10000,     # Ending point (10,000 Kg)
                                    step=1000,     # Interval (1,000 Kg)
                                    value=[min_payload, max_payload]  # Initial selected range
                                                ),       


                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                
                                
                                
                            html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                            ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
@app.callback(
    Output(component_id='success-pie-chart', component_property='figure'),
    Input(component_id='site-dropdown', component_property='value')
)
def get_pie_chart(entered_site):
    if entered_site == 'ALL':
        # If 'ALL' is selected, use the entire DataFrame
        fig = px.pie(spacex_df, names='class', title='Total Success Launches')
    else:
        # Filter the DataFrame for the selected site
        filtered_df = spacex_df[spacex_df['Launch Site'] == entered_site]
        # Create a pie chart for the selected site
        fig = px.pie(filtered_df, names='class', title=f'Success/Failure for {entered_site}')
    
    return fig

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(
    Output(component_id='success-payload-scatter-chart', component_property='figure'),
    [Input(component_id='site-dropdown', component_property='value'),
    Input(component_id="payload-slider", component_property="value")]
                                    )
def update_scatter_chart(selected_site, payload_range):
    if selected_site == 'ALL':
        # If 'ALL' is selected, use the entire DataFrame
        filtered_df = spacex_df
    else:
        # Filter the DataFrame for the selected site
        filtered_df = spacex_df[spacex_df['Launch Site'] == selected_site]
    
    # Filter the DataFrame based on payload range
    filtered_df = filtered_df[(filtered_df['Payload Mass (kg)'] >= payload_range[0]) &
                            (filtered_df['Payload Mass (kg)'] <= payload_range[1])]
    
    # Create a scatter chart
    fig = px.scatter(
        filtered_df,
        x='Payload Mass (kg)',
        y='class',
        color='Booster Version Category',
        title='Payload Mass vs. Class',
    )
    
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server()
